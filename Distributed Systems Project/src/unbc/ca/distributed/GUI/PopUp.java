/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package unbc.ca.distributed.GUI;

import javax.swing.JDialog;
import unbc.ca.distributed.distributions.Generator;
import unbc.ca.distributed.library.Utilites;
import unbc.ca.distributed.management.ObjectFactory;

/**
 *
 * @author behnish
 */
public class PopUp extends JDialog {

    /**
     * Creates new form PopUp
     */
    private String typeGraph = null;

    public String typeGraph() {
        return typeGraph;
    }

    public void setTypeGraph(String type) {
        this.typeGraph = type;
        switch (type) {
            case "Grid":
                jLabel2.setText("Rows");
                numberOfNodes.setEnabled(false);
                rows.setEnabled(true);
                columns.setEnabled(true);
                break;
            case "Chord":
                rows.setEnabled(true);
                jLabel2.setText("Chord Ring");
                columns.setEnabled(false);
                break;
            default:
                numberOfNodes.setEnabled(true);
                rows.setEnabled(false);
                columns.setEnabled(false);
                break;
        }
    }

    public PopUp(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        first.setText("No of Trails");
        second.setText("Probability (0-1)");

        setTitle("Details");
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lable = new javax.swing.JLabel();
        numberOfNodes = new javax.swing.JTextField();
        ok = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        weightForGraph = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        rows = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        columns = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        distribution = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        first = new javax.swing.JLabel();
        second = new javax.swing.JLabel();
        variance = new javax.swing.JTextField();
        constant = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lable.setText("Number Of Nodes");

        numberOfNodes.setText("3");

        ok.setText("Ok");
        ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okActionPerformed(evt);
            }
        });

        jLabel1.setText("Weight for edge");

        weightForGraph.setText("1");

        jLabel2.setText("Rows");

        rows.setText("5");

        jLabel3.setText("Columns");

        columns.setText("5");

        jLabel4.setText("Weights Generation");

        distribution.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Binomial", "Poisson", "Uniform", "Exponential", "Gaussian" }));
        distribution.setSelectedIndex(1);
        distribution.setToolTipText("");
        distribution.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                distributionActionPerformed(evt);
            }
        });

        jLabel5.setText("Distribution");

        first.setText("Mean");

        second.setText("Variance");

        variance.setText("5");

        constant.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Yes", "No" }));
        constant.setSelectedIndex(1);

        jLabel6.setText("Use Constant  (1)");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(ok))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)))
                .addGap(30, 30, 30))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lable)
                                .addGap(26, 26, 26)
                                .addComponent(numberOfNodes, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(rows, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(49, 49, 49)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(weightForGraph, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(variance, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel3)
                                            .addComponent(first))
                                        .addGap(28, 28, 28)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(columns, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(second))))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(distribution, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(constant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(31, 31, 31))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lable)
                    .addComponent(numberOfNodes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(rows, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(columns, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(distribution, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(constant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(first)
                    .addComponent(second))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(weightForGraph, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(variance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addComponent(ok))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okActionPerformed
        // TODO add your handling code here:
        switch (typeGraph) {
            case "Grid":
                ObjectFactory.getMainFrame().setRows(Integer.parseInt(rows.getText()));
                ObjectFactory.getMainFrame().setColumns(Integer.parseInt(columns.getText()));
                ObjectFactory.getMainFrame().setNumberOfNodes(Integer.parseInt(rows.getText()) * Integer.parseInt(columns.getText()));
                break;
            case "Chord":
                ObjectFactory.getMainFrame().setRows(Integer.parseInt(rows.getText()));
                ObjectFactory.getMainFrame().setNumberOfNodes(Integer.parseInt(numberOfNodes.getText()));
                break;
            default:
                ObjectFactory.getMainFrame().setNumberOfNodes(Integer.parseInt(numberOfNodes.getText()));
                break;
        }
        Generator wt = Utilites.returnDistribution(distribution.getSelectedItem().toString(),
                Integer.parseInt(weightForGraph.getText()), Double.parseDouble(variance.getText()));
        ObjectFactory.getMainFrame().setWeightDist(wt);

        if (constant.getSelectedItem().toString().equals("Yes")) {
            ObjectFactory.getMainFrame().setUnitWeight(true);
        } else {
            ObjectFactory.getMainFrame().setUnitWeight(false);
        }

        ObjectFactory.getMainFrame().generateGraph(typeGraph);
        dispose();
    }//GEN-LAST:event_okActionPerformed

    private void distributionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_distributionActionPerformed
        // TODO add your handling code here:

        switch (distribution.getSelectedItem().toString()) {
            case "Binomial":
                variance.setEnabled(true);
                first.setText("Trails");
                second.setText("Probability");
                break;
            case "Poisson":
                first.setText("Mean");
                variance.setEnabled(false);
                second.setText("");
                break;
            case "Uniform":
                variance.setEnabled(true);
                first.setText("Min");
                second.setText("Max");
                break;
            case "Exponential":
                variance.setEnabled(false);
                second.setText("");
                first.setText("Rate");
                break;
            case "Gaussian":
                variance.setEnabled(true);
                first.setText("Mean");
                second.setText("Standard Deviation");
                break;
            case "default":
                variance.setEnabled(true);
                first.setText("Trails");
                second.setText("Probability");
                break;
        }
    }//GEN-LAST:event_distributionActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField columns;
    private javax.swing.JComboBox constant;
    private javax.swing.JComboBox distribution;
    private javax.swing.JLabel first;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    public javax.swing.JLabel lable;
    private javax.swing.JTextField numberOfNodes;
    private javax.swing.JButton ok;
    private javax.swing.JTextField rows;
    private javax.swing.JLabel second;
    private javax.swing.JTextField variance;
    private javax.swing.JTextField weightForGraph;
    // End of variables declaration//GEN-END:variables
}
