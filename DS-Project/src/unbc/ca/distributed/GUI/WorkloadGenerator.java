package unbc.ca.distributed.GUI;

import java.awt.BorderLayout;
import java.util.LinkedHashMap;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import unbc.ca.distributed.distributions.Generator;
import unbc.ca.distributed.library.Utilites;
import unbc.ca.distributed.library.Workload;
import unbc.ca.distributed.management.ObjectFactory;

public class WorkloadGenerator extends javax.swing.JPanel {

    DefaultListModel listModel = new DefaultListModel();
    int count;

    public WorkloadGenerator() {
        initComponents();
        count = 0;
        ObjectFactory.setMultiple(true);
        rowsLabel.setVisible(false);
        columnLabel.setVisible(false);
        rows.setVisible(false);
        cols.setVisible(false);

        first.setText("Min");
        second.setText("Max");
        first1.setText("Mean");
        second1.setText("Standard Deviation");
        first2.setText("Mean");
        second2.setText("");
        first3.setText("Mean");
        second3.setText("");

        delayVariance.setEnabled(false);

        ObjectFactory.getMainFrame().setT("Workload Generator");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        processcount = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        distribution = new javax.swing.JComboBox();
        csSittingTimeMean = new javax.swing.JTextField();
        next = new javax.swing.JButton();
        addLoad = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        workloadList = new javax.swing.JList();
        jLabel7 = new javax.swing.JLabel();
        interReqMean = new javax.swing.JTextField();
        interReqVariance = new javax.swing.JTextField();
        csSittingTimeVariance = new javax.swing.JTextField();
        first = new javax.swing.JLabel();
        first1 = new javax.swing.JLabel();
        second = new javax.swing.JLabel();
        second1 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        topology = new javax.swing.JComboBox();
        deleteWorkload = new javax.swing.JButton();
        weightOfEdgesMean = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        simulationTime = new javax.swing.JTextField();
        first2 = new javax.swing.JLabel();
        delayMean = new javax.swing.JTextField();
        second2 = new javax.swing.JLabel();
        delayVariance = new javax.swing.JTextField();
        rowsLabel = new javax.swing.JLabel();
        rows = new javax.swing.JTextField();
        columnLabel = new javax.swing.JLabel();
        cols = new javax.swing.JTextField();
        distribution1 = new javax.swing.JComboBox();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        distribution3 = new javax.swing.JComboBox();
        distribution2 = new javax.swing.JComboBox();
        jLabel19 = new javax.swing.JLabel();
        first3 = new javax.swing.JLabel();
        second3 = new javax.swing.JLabel();
        weightVariance = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        customize = new javax.swing.JButton();
        constant = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        constantForHopProcessing = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();

        setLayout(null);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(null);

        jLabel1.setText("Number of process");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(22, 52, 135, 14);

        processcount.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        processcount.setText("10");
        processcount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processcountActionPerformed(evt);
            }
        });
        jPanel1.add(processcount);
        processcount.setBounds(160, 50, 169, 24);

        jLabel2.setText("Distribution IR");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(20, 90, 160, 14);

        distribution.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Binomial", "Poisson", "Uniform", "Exponential", "Gaussian" }));
        distribution.setSelectedIndex(1);
        distribution.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                distributionActionPerformed(evt);
            }
        });
        jPanel1.add(distribution);
        distribution.setBounds(160, 90, 110, 20);

        csSittingTimeMean.setText("1");
        jPanel1.add(csSittingTimeMean);
        csSittingTimeMean.setBounds(260, 220, 40, 20);

        next.setText("Next ->");
        next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextActionPerformed(evt);
            }
        });
        jPanel1.add(next);
        next.setBounds(420, 640, 90, 23);

        addLoad.setText("Add to Load >>");
        addLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addLoadActionPerformed(evt);
            }
        });
        jPanel1.add(addLoad);
        addLoad.setBounds(550, 170, 140, 23);

        jScrollPane1.setViewportView(workloadList);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(710, 60, 210, 280);

        jLabel7.setText("Workloads");
        jPanel1.add(jLabel7);
        jLabel7.setBounds(710, 30, 90, 14);

        interReqMean.setText("10");
        jPanel1.add(interReqMean);
        interReqMean.setBounds(260, 130, 40, 20);

        interReqVariance.setText("0");
        jPanel1.add(interReqVariance);
        interReqVariance.setBounds(440, 130, 50, 20);

        csSittingTimeVariance.setText("5");
        jPanel1.add(csSittingTimeVariance);
        csSittingTimeVariance.setBounds(440, 220, 50, 20);

        first.setText("Mean");
        jPanel1.add(first);
        first.setBounds(160, 130, 70, 14);

        first1.setText("Mean");
        jPanel1.add(first1);
        first1.setBounds(160, 220, 70, 14);

        second.setText("Variance");
        jPanel1.add(second);
        second.setBounds(310, 130, 100, 14);

        second1.setText("Variance");
        jPanel1.add(second1);
        second1.setBounds(310, 220, 110, 14);

        jLabel11.setText("Topology");
        jPanel1.add(jLabel11);
        jLabel11.setBounds(20, 350, 70, 14);

        topology.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Ring", "Star", "Tree", "Full Connected", "Grid", "Random", "Hypercube", "Bus" }));
        topology.setToolTipText("");
        topology.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                topologyActionPerformed(evt);
            }
        });
        jPanel1.add(topology);
        topology.setBounds(160, 350, 96, 20);

        deleteWorkload.setText("Delete");
        deleteWorkload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteWorkloadActionPerformed(evt);
            }
        });
        jPanel1.add(deleteWorkload);
        deleteWorkload.setBounds(940, 60, 63, 23);

        weightOfEdgesMean.setText("5");
        jPanel1.add(weightOfEdgesMean);
        weightOfEdgesMean.setBounds(280, 460, 50, 20);

        jLabel13.setText("Simulation Time");
        jPanel1.add(jLabel13);
        jLabel13.setBounds(20, 600, 100, 14);

        simulationTime.setText("100000");
        jPanel1.add(simulationTime);
        simulationTime.setBounds(170, 600, 50, 20);

        first2.setText("Mean");
        jPanel1.add(first2);
        first2.setBounds(160, 300, 30, 14);

        delayMean.setText("3");
        jPanel1.add(delayMean);
        delayMean.setBounds(260, 300, 40, 20);

        second2.setText("Variance");
        jPanel1.add(second2);
        second2.setBounds(310, 300, 110, 14);

        delayVariance.setText("3");
        jPanel1.add(delayVariance);
        delayVariance.setBounds(440, 300, 50, 20);

        rowsLabel.setText("Rows");
        jPanel1.add(rowsLabel);
        rowsLabel.setBounds(290, 350, 60, 14);

        rows.setText("5");
        jPanel1.add(rows);
        rows.setBounds(350, 350, 30, 20);

        columnLabel.setText("Columns");
        jPanel1.add(columnLabel);
        columnLabel.setBounds(410, 350, 40, 14);

        cols.setText("5");
        jPanel1.add(cols);
        cols.setBounds(490, 350, 40, 20);

        distribution1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Binomial", "Poisson", "Uniform", "Exponential", "Gaussian" }));
        distribution1.setSelectedIndex(2);
        distribution1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                distribution1ActionPerformed(evt);
            }
        });
        jPanel1.add(distribution1);
        distribution1.setBounds(160, 170, 110, 20);

        jLabel17.setText("Distribution CS");
        jPanel1.add(jLabel17);
        jLabel17.setBounds(20, 170, 160, 14);

        jLabel18.setText("Distribution HP");
        jPanel1.add(jLabel18);
        jLabel18.setBounds(20, 260, 160, 14);

        distribution3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Binomial", "Poisson", "Uniform", "Exponential", "Gaussian" }));
        distribution3.setSelectedIndex(1);
        distribution3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                distribution3ActionPerformed(evt);
            }
        });
        jPanel1.add(distribution3);
        distribution3.setBounds(160, 420, 110, 20);

        distribution2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Binomial", "Poisson", "Uniform", "Exponential", "Gaussian" }));
        distribution2.setSelectedIndex(1);
        distribution2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                distribution2ActionPerformed(evt);
            }
        });
        jPanel1.add(distribution2);
        distribution2.setBounds(160, 260, 110, 20);

        jLabel19.setText("Distribution for weights");
        jPanel1.add(jLabel19);
        jLabel19.setBounds(20, 420, 140, 14);

        first3.setText("Mean");
        jPanel1.add(first3);
        first3.setBounds(160, 460, 110, 14);

        second3.setText("Variance");
        jPanel1.add(second3);
        second3.setBounds(340, 460, 100, 14);

        weightVariance.setText("5");
        jPanel1.add(weightVariance);
        weightVariance.setBounds(470, 460, 50, 20);

        jLabel3.setText("Constant Weight");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(20, 510, 150, 30);

        customize.setText("Customize Node Parms");
        customize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customizeActionPerformed(evt);
            }
        });
        jPanel1.add(customize);
        customize.setBounds(740, 370, 150, 23);

        constant.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Yes", "No" }));
        jPanel1.add(constant);
        constant.setBounds(180, 520, 42, 20);

        jLabel4.setText("Constant Hop Processing");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(20, 560, 130, 14);

        constantForHopProcessing.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Yes", "No" }));
        jPanel1.add(constantForHopProcessing);
        constantForHopProcessing.setBounds(180, 560, 42, 20);

        add(jPanel1);
        jPanel1.setBounds(20, 50, 1020, 680);

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("Workload generator");
        add(jLabel6);
        jLabel6.setBounds(20, 10, 260, 22);
    }// </editor-fold>//GEN-END:initComponents

private void addLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addLoadActionPerformed

    Workload w = null;
    if (!topology.getSelectedItem().toString().equals("Hypercube")) {
        w = new Workload();
    } else {
        w = new Workload(distribution.getSelectedItem().toString(), interReqMean.getText(), interReqVariance.getText(),
                distribution1.getSelectedItem().toString(), csSittingTimeMean.getText(), csSittingTimeVariance.getText(),
                distribution2.getSelectedItem().toString(), delayMean.getText(), delayVariance.getText()
                );
        
    }
    
    int noP = Integer.parseInt(processcount.getText());
    if (processcount.getText().equals("") && !topology.getSelectedItem().toString().equals("Grid")) {
        ObjectFactory.getMainFrame().showErrorMessage("Please enter the number of processes");
        return;
    } else if (!topology.getSelectedItem().toString().equals("Grid")) {
        w.setNoOfProcessor(Integer.parseInt(processcount.getText()));
    }

//    if (topology.getSelectedItem().toString().equals("Chord")) {
//        w.setChords(Integer.parseInt(rows.getText()));
//    }
    if (topology.getSelectedItem().toString().equals("Grid")) {
        w.setRows(Integer.parseInt(rows.getText()));
        w.setColumns(Integer.parseInt(cols.getText()));
    }
    if (constant.getSelectedItem().toString().equals("Yes")) {
        w.setConstant(true);
    }
    
    if (constantForHopProcessing.getSelectedItem().toString().equals("Yes")) {
        w.setConstantForHopProcessing(true);
    }

    w.setInterQ(Double.parseDouble(interReqMean.getText()));
    w.setName("Workload " + count);
    w.setId(count);
    switch (topology.getSelectedItem().toString()) {
        case "Tree":
            noP = (int) Math.pow(2, noP) - 1;
            break;
        case "Grid":
            noP = (Integer.parseInt(rows.getText()) * Integer.parseInt(cols.getText()));
            break;
    }

    if (!topology.getSelectedItem().toString().equals("Hypercube")) {        
        for (int i = 1; i <= noP; i++) {
            if(distribution.getSelectedItem().toString().equals("Exponential"))
            {
                
            }
            Generator ir = Utilites.returnDistribution(distribution.getSelectedItem().toString(),
                    Double.parseDouble(interReqMean.getText()), Double.parseDouble(interReqVariance.getText()));
            Generator cs = Utilites.returnDistribution(distribution1.getSelectedItem().toString(),
                    Double.parseDouble(csSittingTimeMean.getText()), Double.parseDouble(csSittingTimeVariance.getText()));
            Generator dp = Utilites.returnDistribution(distribution2.getSelectedItem().toString(),
                    Double.parseDouble(delayMean.getText()), Double.parseDouble(delayVariance.getText()));
            LinkedHashMap<String, Generator> workD = new LinkedHashMap<>();

            workD.put("Critical Section", cs);
            workD.put("Inter Request", ir);
            workD.put("Hop Processing", dp);

            w.getWorkLoaddistributionCollection().put(i, workD);
        }
    }

    Generator wt = Utilites.returnDistribution(distribution3.getSelectedItem().toString(),
            Integer.parseInt(weightOfEdgesMean.getText()), Double.parseDouble(weightVariance.getText()));

    w.setWeightDistribution(wt);
    w.setTopology(topology.getSelectedItem().toString());
    w.setSimulationTime(Integer.parseInt(simulationTime.getText()));

    ObjectFactory.getWorkloads().put(count, w);
    listModel.addElement(w.getName());

    workloadList.setModel(listModel);
    count++;

}//GEN-LAST:event_addLoadActionPerformed


private void nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextActionPerformed

    if (ObjectFactory.getWorkloads().size() < 1) {
        ObjectFactory.getMainFrame().showErrorMessage("Please add atleast one workload");
        return;
    }
    SimulationPanel c = new SimulationPanel();
    c.setBounds(0, 0, ObjectFactory.getMainFrame().widthOfDrawPanel, ObjectFactory.getMainFrame().heightOfDrawPanel);    
    ObjectFactory.setSimPanel(c);

    ObjectFactory.getMainFrame().getContentPane().removeAll();
    ObjectFactory.getMainFrame().getContentPane().add(c, BorderLayout.CENTER);
    ObjectFactory.getMainFrame().getContentPane().add(ObjectFactory.getMessagePanel(), BorderLayout.PAGE_END);
    ObjectFactory.getMainFrame().refreshFrame();
}//GEN-LAST:event_nextActionPerformed

    private void processcountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processcountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_processcountActionPerformed

    private void deleteWorkloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteWorkloadActionPerformed
        // TODO add your handling code here:               
        DefaultListModel dlm = (DefaultListModel) workloadList.getModel();

        if (this.workloadList.getSelectedIndices().length > 0) {
            int[] selectedIndices = workloadList.getSelectedIndices();
            for (int i = selectedIndices.length - 1; i >= 0; i--) {
                dlm.removeElementAt(selectedIndices[i]);
                ObjectFactory.getWorkloads().remove(selectedIndices[i]);
                count--;
            }
        } else {
            ObjectFactory.getMainFrame().showErrorMessage("Please select atleast one workload to delete");
        }
    }//GEN-LAST:event_deleteWorkloadActionPerformed

    private void topologyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_topologyActionPerformed
        // TODO add your handling code here:
        switch (topology.getSelectedItem().toString()) {
            case "Tree":
                jLabel1.setText("Height of Tree");
                if (!processcount.getText().equals("")) {
                    JOptionPane.showMessageDialog(ObjectFactory.getMainFrame(), "Please change the number of processes as tree is constructed according to height");
                    processcount.setText("");
                }
                break;
            case "Hypercube":
                jLabel1.setText("Dimension of Hypercube");
                if (!processcount.getText().equals("")) {
                    JOptionPane.showMessageDialog(ObjectFactory.getMainFrame(), "Please change the number of processes as hypercube is constructed according to dimensions");
                    processcount.setText("");
                }
                break;
            case "Grid":
                rowsLabel.setText("Rows");
                rowsLabel.setVisible(true);
                columnLabel.setVisible(true);
                rows.setVisible(true);
                cols.setVisible(true);
                processcount.setEnabled(false);
                break;
            case "Chord":
                rowsLabel.setText("Chord Value");
                rowsLabel.setVisible(true);
                rows.setVisible(true);

                columnLabel.setVisible(false);
                cols.setVisible(false);

                break;
            default:
                jLabel1.setText("Number of process");
                rowsLabel.setVisible(false);
                rows.setVisible(false);
                columnLabel.setVisible(false);
                cols.setVisible(false);
                processcount.setEnabled(true);

                break;
        }
    }//GEN-LAST:event_topologyActionPerformed

    private void distributionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_distributionActionPerformed
        // TODO add your handling code here:
        // interReqVariance
        switch (distribution.getSelectedItem().toString()) {
            case "Binomial":
                interReqVariance.setEnabled(true);
                first.setText("Trails");
                second.setText("Probability");
                break;
            case "Poisson":
                first.setText("Mean");
                interReqVariance.setEnabled(false);
                second.setText("");
                break;
            case "Uniform":
                interReqVariance.setEnabled(true);
                first.setText("Min");
                second.setText("Max");
                break;
            case "Exponential":
                interReqVariance.setEnabled(false);
                second.setText("");
                first.setText("Rate");
                break;
            case "Gaussian":
                interReqVariance.setEnabled(true);
                first.setText("Mean");
                second.setText("Standard Deviation");
                break;
            case "default":
                interReqVariance.setEnabled(true);
                first.setText("Trails");
                second.setText("Probability");
                break;
        }

    }//GEN-LAST:event_distributionActionPerformed

    private void distribution1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_distribution1ActionPerformed
        // TODO add your handling code here:

        switch (distribution1.getSelectedItem().toString()) {
            case "Binomial":
                csSittingTimeVariance.setEnabled(true);
                first1.setText("Trails");
                second1.setText("Probability");
                break;
            case "Poisson":
                first1.setText("Mean");
                csSittingTimeVariance.setEnabled(false);
                second1.setText("");
                break;
            case "Uniform":
                csSittingTimeVariance.setEnabled(true);
                first1.setText("Min");
                second1.setText("Max");
                break;
            case "Exponential":
                csSittingTimeVariance.setEnabled(false);
                second1.setText("");
                first1.setText("Rate");
                break;
            case "Gaussian":
                csSittingTimeVariance.setEnabled(true);
                first1.setText("Mean");
                second1.setText("Standard Deviation");
                break;
            case "default":
                csSittingTimeVariance.setEnabled(true);
                first1.setText("Trails");
                second1.setText("Probability");
                break;
        }

    }//GEN-LAST:event_distribution1ActionPerformed

    private void distribution2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_distribution2ActionPerformed
        // TODO add your handling code here:        
        switch (distribution2.getSelectedItem().toString()) {
            case "Binomial":
                delayVariance.setEnabled(true);
                first2.setText("Trails");
                second2.setText("Probability");
                break;
            case "Poisson":
                first2.setText("Mean");
                delayVariance.setEnabled(false);
                second2.setText("");
                break;
            case "Uniform":
                delayVariance.setEnabled(true);
                first2.setText("Min");
                second2.setText("Max");
                break;
            case "Exponential":
                delayVariance.setEnabled(false);
                second2.setText("");
                first2.setText("Rate");
                break;
            case "Gaussian":
                delayVariance.setEnabled(true);
                first2.setText("Mean");
                second2.setText("Standard Deviation");
                break;
            case "default":
                delayVariance.setEnabled(true);
                first2.setText("Trails");
                second2.setText("Probability");
                break;
        }

    }//GEN-LAST:event_distribution2ActionPerformed

    private void distribution3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_distribution3ActionPerformed
        // TODO add your handling code here:
        switch (distribution3.getSelectedItem().toString()) {
            case "Binomial":
                weightVariance.setEnabled(true);
                first3.setText("Trails");
                second3.setText("Probability");
                break;
            case "Poisson":
                first3.setText("Mean");
                weightVariance.setEnabled(false);
                second3.setText("");
                break;
            case "Uniform":
                weightVariance.setEnabled(true);
                first3.setText("Min");
                second3.setText("Max");
                break;
            case "Exponential":
                weightVariance.setEnabled(false);
                second3.setText("");
                first3.setText("Rate");
                break;
            case "Gaussian":
                weightVariance.setEnabled(true);
                first3.setText("Mean");
                second3.setText("Standard Deviation");
                break;
            case "default":
                weightVariance.setEnabled(true);
                first3.setText("Trails");
                second3.setText("Probability");
                break;
        }

    }//GEN-LAST:event_distribution3ActionPerformed

    private void customizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customizeActionPerformed
        // TODO add your handling code here:        
        //DefaultListModel dlm = (DefaultListModel) workloadList.getModel();

        if (this.workloadList.getSelectedIndices().length > 0) {
            if (this.workloadList.getSelectedIndices().length > 1) {
                ObjectFactory.getMainFrame().showErrorMessage("Please select only one workload to customize the parameters");

            } else {
                int selected = workloadList.getSelectedIndex();
                ObjectFactory.getMainFrame().remove();
                NodesParameters nodeDetails = new NodesParameters(ObjectFactory.getWorkloads().get(selected).getNoOfProcessor());
                nodeDetails.setBounds(0, 0, ObjectFactory.getMainFrame().widthOfDrawPanel - 800, ObjectFactory.getMainFrame().heightOfDrawPanel);

                NodeSideBar s = new NodeSideBar(true, selected);
                s.setBounds(ObjectFactory.getMainFrame().widthOfDrawPanel - 800, 0, 800, ObjectFactory.getMainFrame().heightOfDrawPanel);

                ObjectFactory.getMainFrame().add(nodeDetails, BorderLayout.CENTER);
                ObjectFactory.getMainFrame().add(s, BorderLayout.LINE_END);
                ObjectFactory.getMainFrame().refreshFrame();

            }
        } else {
            ObjectFactory.getMainFrame().showErrorMessage("Please select atleast one workload to customize the parameters");
        }
    }//GEN-LAST:event_customizeActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addLoad;
    private javax.swing.JTextField cols;
    private javax.swing.JLabel columnLabel;
    private javax.swing.JComboBox constant;
    private javax.swing.JComboBox constantForHopProcessing;
    private javax.swing.JTextField csSittingTimeMean;
    private javax.swing.JTextField csSittingTimeVariance;
    private javax.swing.JButton customize;
    private javax.swing.JTextField delayMean;
    private javax.swing.JTextField delayVariance;
    private javax.swing.JButton deleteWorkload;
    private javax.swing.JComboBox distribution;
    private javax.swing.JComboBox distribution1;
    private javax.swing.JComboBox distribution2;
    private javax.swing.JComboBox distribution3;
    private javax.swing.JLabel first;
    private javax.swing.JLabel first1;
    private javax.swing.JLabel first2;
    private javax.swing.JLabel first3;
    private javax.swing.JTextField interReqMean;
    private javax.swing.JTextField interReqVariance;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton next;
    private javax.swing.JTextField processcount;
    private javax.swing.JTextField rows;
    private javax.swing.JLabel rowsLabel;
    private javax.swing.JLabel second;
    private javax.swing.JLabel second1;
    private javax.swing.JLabel second2;
    private javax.swing.JLabel second3;
    private javax.swing.JTextField simulationTime;
    private javax.swing.JComboBox topology;
    private javax.swing.JTextField weightOfEdgesMean;
    private javax.swing.JTextField weightVariance;
    private javax.swing.JList workloadList;
    // End of variables declaration//GEN-END:variables
}
