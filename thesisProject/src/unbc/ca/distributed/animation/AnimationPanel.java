/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package unbc.ca.distributed.animation;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.util.Map;
import javax.swing.JPanel;
import javax.swing.Timer;
import unbc.ca.distributed.graph.elements.Edge;
import unbc.ca.distributed.graph.elements.Vertex;
import unbc.ca.distributed.management.Configuration;
import unbc.ca.distributed.management.ObjectFactory;
import unbc.ca.distributed.trace.TraceObject;

/**
 *
 * @author behnish
 */
public class AnimationPanel extends JPanel implements MouseListener, MouseWheelListener, Cloneable {

    /**
     * Creates new form AnimationPanel
     */
    private double zoomFactor = 1.0D;
    private boolean stopTimer = false;

    public void setStopTimer(boolean stopTimer) {
        this.stopTimer = stopTimer;
    }

    public AnimationPanel() {
        initComponents();
        ObjectFactory.getMainFrame().updateEdges();
        ObjectFactory.getMainFrame().updateNodePositions();
        addMouseListener(this);
        addMouseWheelListener(this);
        for (Map.Entry<Integer, Vertex> entry : ObjectFactory.getNodes().entrySet()) {
            Vertex vertex = entry.getValue();
            vertex.setColor(Configuration.animationNodeColor);
        }
    }

    public void setZoomFactor(double zoomFactor) {
        this.zoomFactor = zoomFactor;
    }

    public void zoomIn() {
        this.zoomFactor += 0.05D;
    }

    public void zoomOut() {
        this.zoomFactor -= 0.1D;
        if (this.zoomFactor < 0.1D) {
            zoomIn();
        }
    }

    public void animate() {
        int framesPerSecond = 100;
        int delay = 1000 / framesPerSecond;
        final Timer timer = new Timer(delay, null);
        timer.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                repaint();
                if (stopTimer) {
                    timer.stop();
                }
            }
        });
        timer.start();
    }

    @Override
    public void paint(Graphics g2) {
        super.paintComponent(g2);
        Graphics2D g = (Graphics2D) g2;

        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);

        g.scale(this.zoomFactor, this.zoomFactor);

        for (Map.Entry<Integer, Edge> entry : ObjectFactory.getEdges().entrySet()) {
            Edge edge = entry.getValue();
            edge.draw(g);

        }
        for (Map.Entry<Integer, Vertex> entry : ObjectFactory.getNodes().entrySet()) {
            Vertex vertex = entry.getValue();
            vertex.draw(g);
        }

        for (Map.Entry<Integer, TraceObject> entry : ObjectFactory.getDrawingList().entrySet()) {
            Integer index = entry.getKey();
            TraceObject traceObject = entry.getValue();
            if (!traceObject.isAnimationFinished()) {
                traceObject.draw(g);
                if (!traceObject.isConsole()) {
                    ObjectFactory.getSidebar().console.append("Node " + traceObject.getSender() + " is sending message to Node " + traceObject.getReciever() + "\n");
                    traceObject.setConsole(true);
                }
            } else {
                ObjectFactory.getDrawingList().remove(index);
            }
        }
        g.dispose();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();

        jLabel1.setText("jLabel1");

        setBorder(javax.swing.BorderFactory.createEtchedBorder());
        setPreferredSize(new java.awt.Dimension(400, 300));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 396, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 296, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void mouseClicked(MouseEvent e) {
        int singleNodeId = checkPointInside(e.getX(), e.getY());

        if (singleNodeId != 0) {
            SingleNodeDetail single = new SingleNodeDetail("Details for Node " + singleNodeId);
            single.nodeValue.setText(String.valueOf(singleNodeId));
            single.setNodeId(singleNodeId);
            single.setVisible(true);
        }
    }

    @Override
    public void mousePressed(MouseEvent e) {
    }

    @Override
    public void mouseReleased(MouseEvent e) {
    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }

    public int checkPointInside(int x, int y) {
        for (Map.Entry<Integer, Vertex> entry : ObjectFactory.getNodes().entrySet()) {
            Integer integer = entry.getKey();
            Vertex vertex = entry.getValue();

            int x0 = x - (int) vertex.getX();
            int y0 = y - (int) vertex.getY();
            int radius = Configuration.radius * 4;
            if (x0 * x0 + y0 * y0 <= radius * radius) {
                return integer;
            }

        }
        return 0;
    }

    @Override
    public void mouseWheelMoved(MouseWheelEvent e) {
        int notches = e.getWheelRotation();
        if (notches < 0) {
            zoomIn();
        } else {
            zoomOut();
        }
        invalidate();
        repaint();

    }
}
